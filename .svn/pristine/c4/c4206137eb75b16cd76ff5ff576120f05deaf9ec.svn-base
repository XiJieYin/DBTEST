<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
	       http://www.springframework.org/schema/beans
	       http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	       http://www.springframework.org/schema/tx
	       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	       http://www.springframework.org/schema/aop
	       http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	       http://www.springframework.org/schema/context
	       http://www.springframework.org/schema/context/spring-context-3.2.xsd">
    
	
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.dbtest" />
	<!-- <context:component-scan base-package="com.gx.common" />
	<context:component-scan base-package="com.gx.hz" /> -->

	<!-- 	加载数据库属性文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
		<property name="locations">  
			<list>  
                 <value>classpath:db.properties</value>
            </list>  
        </property>  
	</bean>

	<!-- 阿里 druid数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">  
         <!-- 数据库基本信息配置 -->
         <property name="url" value="${url}" />  
         <property name="username" value="${username}" />  
         <property name="password" value="${password}" />  
         <property name="driverClassName" value="${driverClassName}" />  
         <property name="filters" value="${filters}" />  
   		 <!-- 最大并发连接数 -->
         <property name="maxActive" value="${maxActive}" />
         <!-- 初始化连接数量 -->
         <property name="initialSize" value="${initialSize}" />
         <!-- 配置获取连接等待超时的时间 -->
         <property name="maxWait" value="${maxWait}" />
         <!-- 最小空闲连接数 -->
         <property name="minIdle" value="${minIdle}" />  
   		 <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
         <property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
         <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
         <property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />  
         <property name="validationQuery" value="${validationQuery}" />  
         <property name="testWhileIdle" value="${testWhileIdle}" />  
         <property name="testOnBorrow" value="${testOnBorrow}" />  
         <property name="testOnReturn" value="${testOnReturn}" />
         <property name="poolPreparedStatements" value="${poolPreparedStatements}" />  
         <property name="maxOpenPreparedStatements" value="${maxOpenPreparedStatements}" />
         <!-- 打开removeAbandoned功能 -->
         <property name="removeAbandoned" value="${removeAbandoned}" />
         <!-- 1800秒，也就是30分钟 -->
         <property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
         <!-- 关闭abanded连接时输出错误日志 -->   
         <property name="logAbandoned" value="${logAbandoned}" />
	</bean>
	
	<bean id="druid-stat-interceptor"
    	class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
  	</bean>

	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
    	scope="prototype">
    	<property name="patterns">
	        <list>
	            <!-- <value>com.gx.hz.service.*</value> -->
	            <value>com.dbtest.dao.*</value>
	        </list>
	    </property>
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis.config.xml"></property>
		<!-- 自动扫描mapping.xml文件 -->
		<!-- <property name="mapperLocations" value="classpath:com/gx/hz/mapping/*.xml"></property> -->
		<property name="mapperLocations" value="classpath:com/dbtest/dao/impl/*.xml"></property>
		<property name="typeAliasesPackage" value="com.isea533.ssm.model"/>
	</bean>
	
	<!-- 构造注入sqlSession -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>
	
	<!-- 配置mybatis自动扫描dao 不用写实现类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
       <!-- <property name="basePackage" value="com.gx.hz.dao" />   -->
        <property name="basePackage" value="com.dbtest.dao" />  
       <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>  
    </bean>
    
 	<!-- JDBC事务管理器 -->
	<!-- <bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean> -->
	<!-- 开启注解事务驱动,方法上添加@Transactional(propagation=Propagation.REQUIRED)传播特性视业务而定 -->
<!-- 	<tx:annotation-driven transaction-manager="transactionManager" /> -->

 	<!-- 配置事务的传播特性 -->
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager">
    	<tx:attributes>
      		<tx:method name="add*" propagation="REQUIRED" />
      		<tx:method name="batch*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="del*" propagation="REQUIRED" />
	        <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="count*" propagation="REQUIRED" read-only="true" /> 
            <tx:method name="find*" propagation="REQUIRED" read-only="true" /> 
            <tx:method name="list*" propagation="REQUIRED" read-only="true" /> 
            <tx:method name="query*" propagation="REQUIRED" read-only="true" /> 
	        <tx:method name="*" read-only="true"/>
    	</tx:attributes>
  	</tx:advice> -->

	<!-- 哪些类的哪些方法参与事务  -->
  	<!-- <aop:config> -->
	<!-- 只对业务逻辑层实施事务  "execution(* com.talk915.liveManagement.*.service.*.impl.*.*(..))" -->
    	<!-- <aop:pointcut id="serviceMethods" expression="execution(* com.gx.hz.service.impl.*.*(..))"/>
    	<aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods"/> -->
	<!-- Druid Spring监控   -->
    	<!-- <aop:advisor advice-ref="druid-stat-interceptor"
        	pointcut-ref="druid-stat-pointcut" />
  	</aop:config> -->
</beans>